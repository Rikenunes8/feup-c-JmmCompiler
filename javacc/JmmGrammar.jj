PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;

SKIP : " " | "\t" | "\r" | "\n";

TOKEN :
	    < ADD   : "+" >
	|   < SUB   : "-" >
	|   < MUL   : "*" >
	|   < DIV   : "/" >

	|   < OPEN_PAREN    : "(" >
	|   < CLOSE_PAREN   : ")" >
	|   < OPEN_SQR_BRACKET    : "[" >
	|   < CLOSE_SQR_BRACKET   : "]" >
	|   < OPEN_CRV_BRACKET    : "{" >
	|   < CLOSE_CRV_BRACKET   : "}" >


	|   < AND   : "&&" >
	|   < LT    : "<" >
	|   < TRUE  : "true" >
	|   < FALSE : "false" >
	|   < NOT   : "!" >
	|   < EQ    : "=" >

	|   < DOT   : "." >
	|   < COMMA : "," >
	|   < SEMICOLON : ";" >
	|   < LENGTH    : "length" >
	|   < THIS  : "this" >
	|   < NEW   : "new" >


  	|   < IMPORT    : "import" >
	|   < INT   : "int" >
	|   < BOOLEAN   : "boolean" >

	|   < IDENTIFIER : (< LETTER >) (< LETTER > | < DIGIT > | "_")* >
	|   < INTEGER : (< DIGIT >)+ >
	|   < DIGIT : ["0" - "9"] >
	|   < LETTER : ["a" - "z" , "A" - "Z"] >


;

Start : Expression <EOF> ;

ImportDeclaration : 
	( < IMPORT > < IDENTIFIER > (< DOT > < IDENTIFIER >)* < SEMICOLON > )*
;

VarDeclaration : Type < IDENTIFIER > < SEMICOLON > ;

Type : 
		< INT > (< OPEN_SQR_BRACKET > < CLOSE_SQR_BRACKET >)?
    |   < BOOLEAN >
    |   < IDENTIFIER >
;

Expression: AndExpression ;

AndExpression: LessThanExpression (< AND > LessThanExpression)* ;

LessThanExpression: AddSubExpression (< LT > AddSubExpression)* ;

AddSubExpression: MulDivExpression (< ADD > MulDivExpression | < SUB > MulDivExpression)* ;

MulDivExpression: UnaryExpression (< MUL > UnaryExpression | < DIV > UnaryExpression)* ;

UnaryExpression: (< NOT > Expression | LastLevelExpression) ;

LastLevelExpression:
    FinalExpression (< DOT > DotExpression | ArrExpression)*
;

DotExpression:
        < LENGTH >
    |   < IDENTIFIER > < OPEN_PAREN > ( Expression (< COMMA > Expression)* )? < CLOSE_PAREN >
;

ArrExpression: < OPEN_SQR_BRACKET > Expression < CLOSE_SQR_BRACKET > ;

FinalExpression :
        < INTEGER >
    |   < TRUE >
    |   < FALSE >
    |   < THIS >
    |   < NEW > NewExpression
    |   < OPEN_PAREN > Expression < CLOSE_PAREN >
    |   < IDENTIFIER >
;

NewExpression :
        < INT > < OPEN_SQR_BRACKET > Expression < CLOSE_SQR_BRACKET >
    |   < IDENTIFIER > < OPEN_PAREN > < CLOSE_PAREN >
;
