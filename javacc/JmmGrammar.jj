PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;

SKIP : " " | "\t" | "\r" | "\n";

TOKEN :
	    < PLUS  : "+" >
	|   < MINUS : "-" >
	|   < TIMES : "*" >
	|   < DIVIDE : "/" >

	|   < OPEN_PAREN    : "(" >
	|   < CLOSE_PAREN   : ")" >
	|   < OPEN_SQR_BRACKET    : "[" >
	|   < CLOSE_SQR_BRACKET   : "]" >
	|   < OPEN_CRV_BRACKET    : "{" >
	|   < CLOSE_CRV_BRACKET   : "}" >


	|   < AND   : "&&" >
	|   < LT    : "<" >
	|   < TRUE  : "true" >
	|   < FALSE : "false" >
	|   < NOT   : "!" >
	|   < EQ    : "=" >

	|   < DOT   : "." >
	|   < COMMA : "," >
	|   < SEMICOLON  : ";" >
	|   < LENGTH    : "length" >
	|   < THIS  : "this" >
	|   < NEW   : "new" >


  	|   < IMPORT : "import" >
	|   < INT   : "int" >
	|   < BOOLEAN   : "boolean" >

	|   < IDENTIFIER : (< LETTER >) (< LETTER > | < DIGIT > | "_")* >
	|   < INTEGER : (< DIGIT >)+ >
	|   < DIGIT : ["0" - "9"] >
	|   < LETTER : ["a" - "z" , "A" - "Z"] >


;

Start : ImportDeclaration VarDeclaration <EOF> ;

ImportDeclaration : 
	(
		< IMPORT > < IDENTIFIER > 
			(
				< DOT > < IDENTIFIER >
			)* 
		< SEMICOLON >
	)* 
;

VarDeclaration : Type < IDENTIFIER > < SEMICOLON > ;
Type : 
		(SCAN 2 < INT > < OPEN_SQR_BRACKET > < CLOSE_SQR_BRACKET > | < INT >) | 
		< BOOLEAN > |
		< IDENTIFIER >
;



AdditiveExpression :
	MultiplicativeExpression
	(
		(< PLUS > | < MINUS >)
		MultiplicativeExpression
	)?
;

MultiplicativeExpression :
	Factor
	(
		(< TIMES > | < DIVIDE >)
		Factor
	)?
;

Factor :
	< INTEGER > |
	< MINUS> Factor |
	< OPEN_PAREN > AdditiveExpression < CLOSE_PAREN >
;
