PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;

SKIP : " " | "\t" | "\r" | "\n";

TOKEN :
        < IMPORT    : "import" >
    |   < CLASS     : "class" >
    |   < EXTENDS   : "extends" >
    |   < PUBLIC    : "public" >
    |   < THIS      : "this" >
    |   < NEW       : "new" >
    |   < LENGTH    : "length" >

    |   < INT       : "int" >
    |   < BOOLEAN   : "boolean" >

    |   < DOT       : "." >
    |   < COMMA     : "," >
    |   < SEMICOLON : ";" >

    |   < OPEN_PAREN    : "(" >
    |   < CLOSE_PAREN   : ")" >
    |   < OPEN_SQR_BRACKET    : "[" >
    |   < CLOSE_SQR_BRACKET   : "]" >
    |   < OPEN_CRV_BRACKET    : "{" >
    |   < CLOSE_CRV_BRACKET   : "}" >

	|   < PLUS  : "+" >
	|   < MINUS : "-" >
	|   < TIMES : "*" >
	|   < DIVIDE : "/" >

	|   < AND   : "&&" >
	|   < LT    : "<" >
	|   < TRUE  : "true" >
	|   < FALSE : "false" >
	|   < NOT   : "!" >
	|   < EQ    : "=" >

	|   < IDENTIFIER : (< LETTER >) (< LETTER > | < DIGIT > | "_")* >
	|   < INTEGER   : (< DIGIT >)+ >
	|   < DIGIT     : ["0" - "9"] >
	|   < LETTER    : ["a" - "z" , "A" - "Z"] >


;

Start : ImportDeclaration ClassDeclaration <EOF> ;

ImportDeclaration : 
	( < IMPORT > < IDENTIFIER > ( < DOT > < IDENTIFIER > )* < SEMICOLON > )*
;

ClassDeclaration :
    < CLASS > < IDENTIFIER > (< EXTENDS > < IDENTIFIER >)?
    < OPEN_CRV_BRACKET >
        ( VarDeclaration )*
        ( MethodDeclaration )*
    < CLOSE_CRV_BRACKET >
;

VarDeclaration :
    Type < IDENTIFIER > < SEMICOLON >
;

MethodDeclaration:
    < PUBLIC > < SEMICOLON >
;

Type : 
    (SCAN 2 < INT > < OPEN_SQR_BRACKET > < CLOSE_SQR_BRACKET > | < INT >) |
    < BOOLEAN > |
    < IDENTIFIER >
;
